require 'json'
require 'fileutils'
require 'pathname'
class String
  def titlecase
    split(/([[:alpha:]]+)/).map(&:capitalize).join
  end
end

def truncate(string, length = 20)
  string.size > length+5 ? [string[0,length],string[-5,5]].join("...") : string
end
def writeFileIfNotExist(filePath, string)
  if !File.exist?(filePath) 
    if (Dir.exist?(File.basename(filePath)) == false)
      FileUtils.mkdir File.basename(filePath)
    end
    File.write(filePath, string)
  end
end

def deleteFolder(filePath)
  if (Dir.exist?(filePath))
    puts "deleting: #{filePath}"
    FileUtils.rm_rf(filePath, :secure=>true)
    puts "deleted: #{filePath} exists: #{Dir.exist?(filePath)}"
  end
end

fastlane_version '2.135.2'
opt_out_usage

$ios_scheme = ENV["PROJECT_NAME"] || File.basename(File.expand_path('..')).gsub(/[^a-zA-Z0-9]/, "")

i18nEnJSON = JSON.parse(File.read('../app/i18n/en.json'))
packageJSON = JSON.parse(File.read('../package.json'))
fastlaneOptions = packageJSON['fastlane'] || Hash.new
# puts "packageJSON:"  + JSON.generate(packageJSON)
puts "fastlaneOptions:"  + JSON.generate(fastlaneOptions)
puts "working directory:"  + Dir.getwd

project_root_path = Pathname.new("../").realpath.to_s

sentry_cli_path = File.join(project_root_path, 'node_modules/.bin/sentry-cli')

app_identifier = ENV["APP_ID"] || CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
app_name = i18nEnJSON['$'+app_identifier] ? i18nEnJSON['$'+app_identifier]['app']['name'] : i18nEnJSON['app']['name']
app_resources_path = ENV["APP_RESOURCES"] || "App_Resources" # based on nativescript.config.js !!!
app_build_path = ENV["APP_BUILD_PATH"] || "platforms" # based on nativescript.config.js !!!
metadata_path = ENV["SUPPLY_METADATA_PATH"]  || "metadata"
metadata_languages = ENV["SUPPLY_METADATA_LANGUAGES"]  || ["en-US", "fr-FR"]
metadata_path_realpath = File.join(project_root_path, 'fastlane', metadata_path)

tag_prefix = ENV["TAG_PREFIX"] || ""
ignore_app_scope = ENV["IGNORE_APP_SCOPE"]
puts "app_identifier:"  + app_identifier
puts "app_name:"  + app_name
puts "app_build_path:"  + app_build_path
puts "app_resources_path:"  + app_resources_path
puts "metadata_path:"  + metadata_path
puts "metadata_path_realpath:"  + metadata_path_realpath
puts "project_root_path:"  + project_root_path

desc 'test lane'
lane :test do
    print "TEST SUCCESSFUL!"
    if (fastlaneOptions['sftp'])
      server_url = fastlaneOptions['sftp']['url']
      server_user = fastlaneOptions['sftp']['user']
      server_port = fastlaneOptions['sftp']['port']
      target_dir = fastlaneOptions['sftp']['target_dir']
      server_key = fastlaneOptions['sftp']['server_key'] || "#{Dir.home}/.ssh/id_rsa"
      sftp_upload(
        server_url: server_url,
        server_port: server_port,
        server_user: server_user,
        server_key: server_key,
        target_dir:  target_dir, 
        file_paths: Dir.glob(File.expand_path(File.join(project_root_path,  app_build_path, "android/app/build/outputs/apk/release/*.apk"))),
      )
    end
end
desc 'Check Git Status'
lane :checkGitStatus do
    # we dont test for git status in ci cause we modify files
    if (ENV["GITHUB_ACTIONS"] != 'true')
      repo_status = Actions.sh("git status --porcelain -uno")
      repo_clean = repo_status.empty?
      if repo_clean
        UI.success('Git status is clean, all good! ðŸ’ª')
      else
        error_message = "Git repository is dirty! Please ensure the repo is in a clean state by committing/stashing/discarding all changes first."
        UI.user_error!(error_message)
      end
    end
end
desc 'Check Sentry Cli Status'
lane :checkSentryClitatus do
    if sentry_check_cli_installed(
      sentry_cli_path: sentry_cli_path
    )
      UI.success('Sentry cli installed, all good! ðŸ’ª')
    else
      error_message = "We cant find sentry cli"
      UI.user_error!(error_message)
    end
end

desc 'Ensure deps are installed'
lane :ns_install do |params| 
  sh("ns", "install")
end

desc 'Setup'
lane :setup do |params| 
  options = params[:options]
  if (ENV["GITHUB_ACTIONS"] == 'true')
    setup_ci
    # create_keychain(
    #   name: "action_keychain",
    #   password: "githubaction",
    #   default_keychain: true,
    #   unlock: true,
    #   timeout: 3600,
    #   lock_when_sleeps: false
    # )
  end
  # we are in fastlane folder let s move up
  if (options[:sentry] == true)
    checkSentryClitatus
  end
  if (options[:create_tag] != false)
    checkGitStatus
  end
  ns_install
end

desc 'Prepare the application.'
lane :prepare do |params| 
  platform = params[:platform]
  options = params[:options]
  deleteFolder(File.join(project_root_path, app_build_path, platform))
  Dir.chdir(project_root_path) do
    if (platform == 'ios')
      if (options[:sentry] == true)
        sh("npm", "run", "prepare.ios.sentry")
      else
        sh("npm", "run", "prepare.ios")
      end
    else
      sh("ns", "prepare", platform, "--release", "--env.adhoc")
    end
  end
end

lane :build_and_publish do |params|
  platform = params[:platform]
  flavor = params[:flavor]
  options = params[:options]
  setup(options: options)
  build_flavor(platform:platform, flavor:flavor, options: options)
end

lane :build_flavor do |params| 
  platform = params[:platform]
  flavor = params[:flavor]
  options = params[:options]
  version = ""
  versionCode = ""
  Dir.chdir(project_root_path) do
    version  =  sh("./node_modules/.bin/get-version", platform, "version").gsub(/\n/,'')
    versionCode  =  sh("./node_modules/.bin/get-version", platform, "code").gsub(/\n/,'')
  end
  
  # there we add the platform to the dist paramater. The idea is to have different dist for ios android
  # this is because we generate different sources for android and ios so we have different sourceMaps
  # and so to map errors correctly we use different dist for ios and android
  sentryDist =  versionCode + '.' + platform # optional distribution of the release usually the buildnumber

  repository_url = ( fastlaneOptions['github_repository_name'] || packageJSON['repository'] || ENV['REPOSITORY']).match(/(.*?)(\.git)?$/)[1]
  repository_name = repository_url.match(/([^\/]+\/[^\/]+)(\.git)?$/)[1]
  commit_url = repository_url + "/commit"
  sentry_version = "#{app_identifier}@#{version}+#{versionCode}"
  dist_path = File.expand_path(File.join(project_root_path, 'dist'))
  puts "working directory:"  + Dir.getwd
  puts "dist_path:"  + dist_path
  puts "platform:"  + platform
  puts "repository_name:"  + repository_name
  puts "repository_url:"  + repository_url
  puts "commit_url:"  + commit_url
  puts "flavor:"  + flavor
  puts "version:"  + version
  puts "versionCode:"  + versionCode
  puts "sentry_version:"  + sentry_version
  puts "options:"  + JSON.generate(options.to_json)

  # if (options[:sentry])
  #   sentry_create_release(
  #     sentry_cli_path: sentry_cli_path,
  #     version: sentry_version
  #   )
  # end

  svelteCheck

  build_output = build(flavor: flavor, options: options)
  puts "build_output #{JSON.pretty_generate(build_output)}"
  # copy dist files to dist, already done on iOS
  if (platform == 'android')
    puts "copy dist files to #{dist_path}"
    if (Dir.exist?(dist_path) == false)
      FileUtils.mkdir dist_path
    end
    FileUtils.cp_r(Dir.glob(File.join(project_root_path, app_build_path, "android/app/build/outputs/apk/release/*.apk")),dist_path )
    FileUtils.cp_r(Dir.glob(File.join(project_root_path, app_build_path, "android/app/build/outputs/bundle/release/*.aab")),dist_path )
  end

  if (ENV["GITHUB_ACTIONS"] != 'true')
    # push anything standing
    push_to_git_remote(tags:false)
  end

  # commit version changes
  if (ENV["GITHUB_ACTIONS"] == 'true')
    # sh("git add *.plist *.gradle; git commit -m 'chore: new build' --allow-empty")
    git_add(path: ["./*.plist", "./*.gradle"])
    git_commit(path: ["./*.plist", "./*.gradle"], message: "chore: new build", allow_nothing_to_commit: true)
  end

  if (options[:sentry] == true)
    # sh("npm", "run", "sentry-set-commits", "#{sentry_version}")
    sentry_upload
  end

  if (options[:publish] != false)
    tag = "#{tag_prefix}#{platform}/#{flavor}/#{version}/#{versionCode}";
    changelog = get_changelog(platform:platform, flavor:flavor, commit_url:commit_url)
    if (flavor != 'github' && platform == 'android')
      write_changelog(version:versionCode, changelog: flavor != 'github' ? changelog : get_changelog(platform:platform, flavor:'store'));
    end
    case flavor
    when 'appcenter'
      upload_appcenter(changelog:changelog, version: version, versionCode: versionCode, flavor:flavor)
    when 'github'
      set_github_release(
        repository_name: repository_name,
        api_token: ENV["GH_TOKEN"],
        name: "#{app_name}(#{platform}): v#{version} Build #{versionCode}",
        tag_name: tag,
        description: changelog,
        upload_assets: Dir.glob(File.join(dist_path, "*.apk"))
      )
    # when 'fdroid'
    #   if (fastlaneOptions['sftp'])
    #     server_url = fastlaneOptions['sftp']['url']
    #     server_user = fastlaneOptions['sftp']['user']
    #     server_port = fastlaneOptions['sftp']['port']
    #     target_dir = fastlaneOptions['sftp']['target_dir']
    #     server_key = fastlaneOptions['sftp']['server_key'] || "#{Dir.home}/.ssh/id_rsa"
    #     sftp_upload(
    #       server_url: server_url,
    #       server_port: server_port,
    #       server_user: server_user,
    #       server_key: server_key,
    #       target_dir:  target_dir, 
    #       file_paths: Dir.glob(File.expand_path("./platforms/android/app/build/outputs/apk/release/*.apk")),
    #     )
    #   end
      when 'alpha','beta','production'
        upload_store(changelog:changelog, version: version, versionCode: versionCode, flavor:flavor, options:options, build_output:build_output)
        if (platform == 'ios' && options[:github] != false)
          # we now github create releases on iOS for european users
          changelog = get_changelog(platform:platform, flavor:flavor, format:'github', commit_url:commit_url)
          set_github_release(
            repository_name: repository_name,
            api_token: ENV["GH_TOKEN"],
            name: "#{app_name}(#{platform}): v#{version} Build #{versionCode}",
            tag_name: tag,
            description: changelog,
            upload_assets: Dir.glob(File.join(dist_path, "*.ipa"))
          )
        end
    end
    if (options[:create_tag] != false)
      if !git_tag_exists(tag: tag)
        add_git_tag(tag: tag, force: true)
        push_git_tags(force: true)
      end
    end
    # yarn lock might have change we dont want to commit it
    reset_git_repo( force: true, files: ["yarn.lock", "package.json"])
    # we need to pull to be able to push again
    Actions.sh("git fetch --tags -f")
    Actions.sh("git pull")
    # push any change
    push_to_git_remote(tags:false)
  end
end

lane :svelteCheck do |params|
  Dir.chdir(project_root_path) do
    sh("npm", "run", "svelte-check")
  end
end

lane :get_changelog  do |params| 
  platform = params[:platform]
  flavor = params[:flavor]
  commit_url = params[:commit_url]
  changelogFormat = params[:format] ||  flavor == 'github' ? 'github' : 'plain'
  ignoredScopes = [platform == "ios" ? 'android' : 'ios']
  if (ignore_app_scope)
    ignoredScopes.push(ignore_app_scope)
  end
  display_links = changelogFormat != 'plain'
  puts "get_changelog "+  platform + " "+ flavor + " " + commit_url
  puts "tag_prefix "+ tag_prefix
  puts "changelogFormat "+  changelogFormat
  # puts "display_links "+  display_links
  puts "ignoredScopes "+  ignoredScopes.join(", ")
  isReleasable = analyze_commits(match: "\"#{tag_prefix}#{platform}/#{flavor}*\"", ignore_scopes: ignoredScopes, debug:false)
  logs = conventional_changelog(format: changelogFormat, title: "#{platform.capitalize} Beta", display_title:false, display_links:display_links, display_scopes:false, order:["feat", "fix", "refactor", "perf"], ignore_scopes: ignoredScopes, debug:false, commit_url:commit_url ) || ""
  if (!logs.empty?)
    logs = logs.split(/[\n]/).uniq
    translateLogs = logs.select {|v| v =~ /Translated .* using Weblate/ }
    logs = (logs - translateLogs).map {|l| 
      if (!display_links)
        # remove github issues
        l = l.gsub(/\s\#\d*/, '')
      end
      # remove platform tags
      l = l.gsub(/\*\*\w*:\*\*\s/, '')
      # remove sentry references
      l = l.gsub(/[A-Z]+-[A-Z0-9]+(?=$|\s\()/, '')
      l
    }
    if (!translateLogs.empty?)
      contributors = Array.new
      translateLogs.each { |l|
          contributors.concat(l.to_enum(:scan,/@[a-zA-Z0-9-_]+/).map {$&})
      }
      if (display_links) 
        logs.push("- Translations update by " +  contributors.uniq.join(", "))
      else
        logs.push("- Translations update")
      end
    end
    logs = logs.join("\n")
    puts logs
  end
  logs
end

platform :ios do
  desc 'Upload Dsyms to Sentry'
  lane :sentry_upload do 
    # disable for now as it uses too much storage
    # sentry_debug_files_upload(
    #   url: ENV["SENTRY_URL"],
    #   org_slug: ENV["SENTRY_ORG"],
    #   project_slug: ENV["SENTRY_PROJECT"],
    #   wait: true,
    #   derived_data: false,
    #   include_sources: false,
    #   no_unwind: true,
    #   no_sources: true,
    #   upload_symbol_maps: true
    # )
  end

  private_lane :fastlane_match do |params| 
    if (ENV["GITHUB_ACTIONS"] == 'true')
      match(
        type:params[:type], 
        clone_branch_directly:true,
        # generate_apple_certs: false,
        # keychain_name: "action_keychain",
        # keychain_password: "githubaction"
        readonly: false,
        shallow_clone: true,
        api_key: params[:api_key]
        )
    else
      match(
        type:params[:type], 
        clone_branch_directly:true,
        shallow_clone: true,
        generate_apple_certs: false,
        api_key: params[:api_key]
        )
    end
  end

  private_lane :setup_project do
    
  end
  lane :upload_store  do |params| 
    build_output = params[:build_output]
    api_key = build_output['api_key']
    # if (ENV["GITHUB_ACTIONS"] == 'true')
    #   # get a new key as the build process might be long and the last ke
    #   # might be expired
    #   api_key = app_store_connect_api_key(
    #     key_id: ENV['APPLE_KEY_ID'],
    #     issuer_id: ENV['APPLE_ISSUER_ID'],
    #     key_content: ENV['APPLE_KEY_CONTENT']
    #   )
    #   puts "upload_store generating api_key #{api_key}"
    # end
    if (params[:flavor] == "production")
      upload_to_app_store(
        api_key: api_key,
        ignore_language_directory_validation: true,
        metadata_path:File.join(metadata_path_realpath, "ios"),
        screenshots_path:File.join(metadata_path_realpath, "ios", "screenshots"),
        force: true,
        automatic_release: true,
        reject_if_possible: true,
        submit_for_review: false,
        skip_metadata:  !options[:upload_metadata],
        skip_screenshots: !options[:upload_screenshots],
        overwrite_screenshots: !options[:upload_screenshots],
        release_notes: {
          'default' => params[:changelog]
        },
        submission_information: { 
          export_compliance_uses_encryption: false,
          add_id_info_uses_idfa: false 
        }
      )
    else
      upload_to_testflight(
          changelog:params[:changelog],
          distribute_external: true,
          groups: [params[:flavor]],
          api_key: api_key,
          # skip_waiting_for_build_processing: true
          notify_external_testers: true
        )
    end
    
  end
  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
      if (ENV["GITHUB_ACTIONS"] == 'true')
        api_key = app_store_connect_api_key(
          key_id: ENV['APPLE_KEY_ID'],
          duration: 1200,
          issuer_id: ENV['APPLE_ISSUER_ID'],
          key_content: ENV['APPLE_KEY_CONTENT']
        )
      end
      fastlane_match(type: 'development', api_key: api_key)
      fastlane_match(type: 'appstore', api_key: api_key)
  end

  desc 'Build the iOS application.'
  lane :build do |params| 
      options = params[:options]
      if (ENV["GITHUB_ACTIONS"] == 'true')
        api_key = app_store_connect_api_key(
          key_id: ENV['APPLE_KEY_ID'],
          duration: 1200,
          issuer_id: ENV['APPLE_ISSUER_ID'],
          key_content: ENV['APPLE_KEY_CONTENT']
        )
      end
      if (params[:flavor] == "appcenter")
        register_devices(devices_file: "./fastlane/devices.txt")
        fastlane_match(type: 'adhoc', api_key: api_key)
      else
        fastlane_match(type: 'appstore', api_key: api_key)
      end
      prepare(platform:'ios', options: options)
      if (ENV["GITHUB_ACTIONS"] == 'true')
      #    # automatic code signing
        update_code_signing_settings(
          use_automatic_signing: false,
          bundle_identifier: app_identifier,
          code_sign_identity: "iPhone Distribution",
          profile_name: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING][app_identifier],
          path: File.join(project_root_path, app_build_path, "ios", "#{$ios_scheme}.xcodeproj")
        )
      end
      #   build_ios_app(
      #     output_directory:"dist",
      #     scheme: $ios_scheme,
      #     workspace: "./platforms/ios/#{$ios_scheme}.xcworkspace"
      #   )
      # else
      build_ios_app(
        export_xcargs: '-allowProvisioningUpdates',
        xcargs: "-allowProvisioningUpdates",
        output_directory:"dist",
        scheme: $ios_scheme,
        workspace: File.join(project_root_path, app_build_path, "ios", "#{$ios_scheme}.xcworkspace"),
        export_method: "app-store",
        export_options: {
          provisioningProfiles: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING]
        }
      )
      {"api_key" => api_key}
  end

  desc 'Ship iOS build to Testflight.'
  lane :beta do |options|
    build_and_publish(platform:'ios', flavor:'beta', options: options)
  end
  desc 'Ship iOS build to Testflight.'
  lane :alpha do |options|
    build_and_publish(platform:'ios', flavor:'alpha', options: options)
  end

  desc 'Ship iOS build to AppStore.'
  lane :production do |options|
    build_and_publish(platform:'ios', flavor:'production', options: options)
  end
end

platform :android do
  desc 'Upload  to Sentry'
  lane :sentry_upload do 
  end

  lane :write_changelog do |params| 
    version = params[:version]
    changelog = params[:changelog]

    if (changelog && changelog.length > 500) 
      changelog = changelog[0..499]
    end

    metadata_dir=File.join(metadata_path_realpath,"android")
    puts "current dir: #{Dir.getwd}"
    puts "metadata_dir: #{metadata_dir}"
    system 'mkdir', '-p', metadata_dir
    files = []
    metadata_languages.each { |lang| 
      changelogFolderPath = File.join(metadata_dir, lang, "changelogs")
      puts "changelogFolderPath: #{changelogFolderPath}"
      if (Dir.exist?(changelogFolderPath)) 
        changelogFilePath = File.join(changelogFolderPath, "#{version}.txt")
        writeFileIfNotExist(changelogFilePath, changelog)
        files.push(changelogFilePath)
      end
    }
    # Create a new branch and upload a PR for it.
    if (files.length > 0)
      git_add(path: files)
      git_commit(path: files, message: "#{version} release notes", allow_nothing_to_commit: true)
    end
    # sh("git add #{metadata_dir}; git commit -m '#{version} release notes' --allow-empty")
  end

  lane :upload_store   do |params| 
    options = params[:options]
    track = params[:flavor]
    if (track == 'beta') 
      track = 'internal'
    end

    puts "upload_to_play_store dir: #{Dir.getwd}"
    puts "metadata_dir: #{Pathname.new(File.join(metadata_path_realpath, "android")).realpath.to_s}"
    upload_to_play_store(
      track: track,
      metadata_path:File.join(metadata_path_realpath, "android"),
      track_promote_to: track,
      aab: File.join(project_root_path, app_build_path ,"android/app/build/outputs/bundle/release/app-release.aab"),
      skip_upload_screenshots: !options[:upload_screenshots],
      skip_upload_images: !options[:upload_images],
      skip_upload_metadata: !options[:upload_metadata]
    )
  end

  desc 'Build the Android application.'
  lane :build do |params|
    deleteFolder(File.join(project_root_path, app_build_path, "android"))
    deleteFolder(File.join(project_root_path, app_build_path, "tempPlugin"))
    options = params[:options]
    puts "build flavor:"  + params[:flavor]
    puts "build options:"  + JSON.generate(options.to_json)
    case params[:flavor]
    when 'fdroid','github'
      if (options[:sentry] == true)
        sh("npm", "run", "build.android.production.fdroid.sentry")
      else 
        sh("npm", "run", "build.android.production.fdroid")
      end
    else
      # for now we build sentry releases for playstore to get bug reports
      if (options[:sentry] == true)
        sh("npm", "run", "build.android.production.playstore.sentry")
      else 
        sh("npm", "run", "build.android.production.playstore")
      end
    end
  end


  desc 'Ship to Github.'
  lane :github do |options|
    build_and_publish(platform:'android', flavor:'github', options: options)
  end

  desc 'build for fdroid.'
  lane :fdroid do |options|
    build_and_publish(platform:'android', flavor:'fdroid', options: options)
  end

  desc 'Ship to Android Playstore Beta.'
  lane :beta do |options|
    build_and_publish(platform:'android', flavor:'beta', options: options)
  end

  desc 'Ship to Android Playstore Alpha.'
  lane :alpha do |options|
    build_and_publish(platform:'android', flavor:'alpha', options: options)
  end
end
